{"version":3,"sources":["common/preloader/Preloader.module.css","App.module.css","components/EmployeesByLetter/EmployeesByLetter.module.css","components/Employee/Employee.module.css","components/SelectedEmployees/SelectedEmploees.module.css","api/api.ts","common/constants.ts","common/helpers/employees-helper.ts","redux/employees-reducer.ts","components/Employee/Employee.tsx","components/EmployeesByLetter/EmployeesByLetter.tsx","common/preloader/Preloader.tsx","components/EmployeesBlock/EmployeesBlock.tsx","components/EmployeesBlock/EmployeesBlockContainer.ts","components/SelectedEmployees/SelectedEmployeesBlock.tsx","components/SelectedEmployees/SelectedEmployees.tsx","components/SelectedEmployees/SelectedEmployeesContainer.ts","App.tsx","redux/redux-store.ts","index.tsx"],"names":["module","exports","employeesAPI","axios","get","ALPHABET","MONTHS_NAMES","EMPLOYEES_ACTIVITY_LOCAL_STORAGE_KEY","getEmployeesByMonth","data","dataCopy","slice","sort","a","b","lastName","toLowerCase","Date","getMonth","map","month","arr","filter","dob","toDateString","SET_EMPLOYEES","SET_EMPLOYEES_ACTIVITY","SET_ONE_EMPLOYEE_ACTIVITY","SET_ALL_EMPLOYEES_UN_ACTIVE","initialState","employees","undefined","employeesActivity","setEmployees","type","payload","setEmployeesActivity","dataState","state","action","employeeId","Object","keys","reduce","accum","Employee","active","onActivityChange","className","styles","info","employeesColor","firstName","name","id","onChange","value","checked","EmployeesByLetter","setOneEmployeeActivity","listContainer","letter","length","employee","Preloader","wrapper","dot","dots","EmployeesBlock","getDataEmployees","useEffect","localStorage","setItem","JSON","stringify","item","connector","connect","dispatch","res","sortedEmployees","employeesActivityLocalStorageString","getItem","employeesActivityLocalStorage","parse","compose","SelectedEmployeesBlock","sortData","SelectedEmployees","setAllEmployeesUnActive","container","disabled","onClick","App","tableContainer","EmployeesBlockContainer","SelectedEmployeesContainer","reducers","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9818a140.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Preloader_wrapper__32B-I\",\"dot\":\"Preloader_dot__1NzM-\",\"dots\":\"Preloader_dots__sMr1h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3CEVC\",\"tableContainer\":\"App_tableContainer__3f1Bh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listContainer\":\"EmployeesByLetter_listContainer__dSIvD\",\"letter\":\"EmployeesByLetter_letter__N8kbm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"info\":\"Employee_info__2mkTt\",\"employeesColor\":\"Employee_employeesColor__plhlR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"SelectedEmploees_container__2r0YQ\"};","import axios from \"axios\"\nimport { EmployeeType } from \"../redux/employees-reducer\"\n\nexport const employeesAPI = {\n    getEmployeesData() {\n        return axios.get<EmployeeType[]>(\n            \"https://yalantis-react-school-api.yalantis.com/api/task0/users\"\n        )\n    },\n}\n","export const ALPHABET: string[] = [\n    \"A\",\n    \"B\",\n    \"C\",\n    \"D\",\n    \"E\",\n    \"F\",\n    \"G\",\n    \"H\",\n    \"I\",\n    \"J\",\n    \"K\",\n    \"L\",\n    \"M\",\n    \"N\",\n    \"O\",\n    \"P\",\n    \"Q\",\n    \"R\",\n    \"S\",\n    \"T\",\n    \"U\",\n    \"V\",\n    \"W\",\n    \"X\",\n    \"Y\",\n    \"Z\",\n]\n\nexport const MONTHS_NAMES: string[] = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n]\n\nexport const EMPLOYEES_ACTIVITY_LOCAL_STORAGE_KEY = \"employeesActivity\"\n","import { ALPHABET, MONTHS_NAMES } from \"../constants\"\nimport { EmployeeType } from \"../../redux/employees-reducer\"\n\nexport const sortEmployeesByAlphabet = (data: EmployeeType[]) => {\n    return data\n        .slice()\n        .sort((a, b) =>\n            a.firstName.toLowerCase() > b.firstName.toLowerCase() ? 1 : -1\n        )\n}\n\nexport const getEmployeesByAlphabet = (data: EmployeeType[]) => {\n    return ALPHABET.map((letter) => {\n        return {\n            letter,\n            arr: data.filter(\n                (a) => a.firstName[0].toLowerCase() === letter.toLowerCase()\n            ),\n        }\n    })\n}\n\nexport const getEmployeesByMonth = (data: EmployeeType[]) => {\n    const dataCopy = data\n        .slice()\n        .sort((a, b) =>\n            a.lastName.toLowerCase() > b.lastName.toLowerCase() ? 1 : -1\n        )\n    const months = [\n        ...MONTHS_NAMES.slice(new Date().getMonth()),\n        ...MONTHS_NAMES.slice(0, new Date().getMonth()),\n    ]\n    return months.map((month) => {\n        return {\n            month,\n            arr: dataCopy.filter(\n                (a) =>\n                    new Date(a.dob).toDateString().slice(4, 7).toLowerCase() ===\n                    month.toLowerCase()\n            ),\n        }\n    })\n}\n","import { employeesAPI } from \"../api/api\"\nimport { sortEmployeesByAlphabet } from \"../common/helpers/employees-helper\"\nimport { EMPLOYEES_ACTIVITY_LOCAL_STORAGE_KEY } from \"../common/constants\"\nimport { Dispatch } from \"redux\"\n\nconst SET_EMPLOYEES = \"SET_EMPLOYEES\" as const\nconst SET_EMPLOYEES_ACTIVITY = \"SET_EMPLOYEES_ACTIVITY\" as const\nconst SET_ONE_EMPLOYEE_ACTIVITY = \"SET_ONE_EMPLOYEE_ACTIVITY\" as const\nconst SET_ALL_EMPLOYEES_UN_ACTIVE = \"SET_ALL_EMPLOYEES_UN_ACTIVE\" as const\n\nexport type EmployeeType = {\n    id: string\n    firstName: string\n    lastName: string\n    dob: string\n}\n\nexport type EmployeesType = EmployeeType[] | null | undefined\n\nexport type EmployeesActivityType = {\n    [employeesId: string]: boolean\n}\n\ntype InitialStateType = {\n    employees: EmployeesType\n    employeesActivity: EmployeesActivityType\n}\n\n/*Declaring a general data structure with default values*/\nlet initialState: InitialStateType = {\n    /**\n     * undefined - not loaded\n     * null - some error\n     * [\n     *     id: \"5e00928d91e7feaa9872ec08\",\n     *     dob: \"2019-02-26T16:52:36.244Z\",\n     *     firstName: \"Yang\",\n     *     lastName: \"Carson\"\n     * ]\n     */\n    employees: undefined,\n\n    /**\n     * {\n     *     'id1': false,\n     *     'id2': true,\n     * }\n     */\n    employeesActivity: {},\n}\n\nconst dataState = (\n    state = initialState,\n    action: ActionType\n): InitialStateType => {\n    switch (action.type) {\n        case SET_EMPLOYEES:\n            return {\n                ...state,\n                employees: action.payload,\n            }\n        case SET_EMPLOYEES_ACTIVITY:\n            return {\n                ...state,\n                employeesActivity: action.payload,\n            }\n        case SET_ONE_EMPLOYEE_ACTIVITY:\n            return {\n                ...state,\n                employeesActivity: {\n                    ...state.employeesActivity,\n                    [action.payload.employeeId]: action.payload.state,\n                },\n            }\n        case SET_ALL_EMPLOYEES_UN_ACTIVE:\n            return {\n                ...state,\n                employeesActivity: Object.keys(state.employeesActivity).reduce(\n                    (accum: EmployeesActivityType, employeeId: string) => {\n                        accum[employeeId] = false\n\n                        return accum\n                    },\n                    {}\n                ),\n            }\n        default:\n            return state\n    }\n}\n\ntype EmployeesTypeAction = ReturnType<typeof setEmployees>\n\nconst setEmployees = (data: EmployeesType) => ({\n    type: SET_EMPLOYEES,\n    payload: data,\n})\n\ntype EmployeesActivityActionType = ReturnType<typeof setEmployeesActivity>\n\nconst setEmployeesActivity = (data: EmployeesActivityType) => ({\n    type: SET_EMPLOYEES_ACTIVITY,\n    payload: data,\n})\n\ntype OneEmployeeActivityType = ReturnType<typeof setOneEmployeeActivity>\nexport const setOneEmployeeActivity = (employeeId: string, state: boolean) => ({\n    type: SET_ONE_EMPLOYEE_ACTIVITY,\n    payload: { employeeId, state },\n})\n\ntype AllEmployeesUnActiveType = ReturnType<typeof setAllEmployeesUnActive>\n\nexport const setAllEmployeesUnActive = () => ({\n    type: SET_ALL_EMPLOYEES_UN_ACTIVE,\n})\n\ntype ActionType =\n    | AllEmployeesUnActiveType\n    | OneEmployeeActivityType\n    | EmployeesActivityActionType\n    | EmployeesTypeAction\n\ntype DispatchType = Dispatch<ActionType>\n\nexport const getDataEmployees = () => async (dispatch: DispatchType) => {\n    try {\n        // Success\n        const res = await employeesAPI.getEmployeesData()\n\n        // Employees data\n        const sortedEmployees = sortEmployeesByAlphabet(res.data)\n        dispatch(setEmployees(sortedEmployees))\n\n        // Employees activity\n        let employeesActivity\n\n        // Get employeesActivity from localStorage\n        const employeesActivityLocalStorageString = localStorage.getItem(\n            EMPLOYEES_ACTIVITY_LOCAL_STORAGE_KEY\n        )\n        const employeesActivityLocalStorage =\n            employeesActivityLocalStorageString &&\n            JSON.parse(employeesActivityLocalStorageString)\n\n        employeesActivity = res.data.reduce(\n            (accum: EmployeesActivityType, item: EmployeeType) => {\n                const employeeId = item.id\n\n                // Merge employeesActivity from localStorage with employees from server\n                accum[employeeId] = employeesActivityLocalStorage\n                    ? employeesActivityLocalStorage[employeeId] || false\n                    : false\n\n                return accum\n            },\n            {}\n        )\n\n        dispatch(setEmployeesActivity(employeesActivity))\n    } catch (e) {\n        // Error\n        dispatch(setEmployees(null))\n    }\n}\n\nexport default dataState\n","import styles from \"./Employee.module.css\"\nimport { EmployeeType } from \"../../redux/employees-reducer\"\nimport { FC } from \"react\"\n\ntype PropsType = {\n    data: EmployeeType\n    active: boolean\n    onActivityChange: (state: boolean) => void\n}\n\nconst Employee: FC<PropsType> = ({ data, active, onActivityChange }) => {\n    return (\n        <div>\n            <div className={styles.info}>\n                <span className={active ? styles.employeesColor : undefined}>\n                    {data.firstName} {data.lastName}\n                </span>\n            </div>\n            <div>\n                <input\n                    type=\"radio\"\n                    name={data.id}\n                    onChange={() => {\n                        onActivityChange(true)\n                    }}\n                    value=\"active\"\n                    checked={active}\n                />\n                active\n                <input\n                    type=\"radio\"\n                    name={data.id}\n                    onChange={() => {\n                        onActivityChange(false)\n                    }}\n                    value=\"unactive\"\n                    checked={!active}\n                />\n                not active\n            </div>\n        </div>\n    )\n}\n\nexport default Employee\n","import styles from \"./EmployeesByLetter.module.css\"\nimport Employee from \"../Employee/Employee\"\nimport {\n    EmployeesActivityType,\n    EmployeeType,\n} from \"../../redux/employees-reducer\"\nimport { FC } from \"react\"\n\ntype PropsType = {\n    data: {\n        letter: string\n        arr: EmployeeType[]\n    }\n    employeesActivity: EmployeesActivityType\n    setOneEmployeeActivity: (id: string, state: boolean) => void\n}\n\nconst EmployeesByLetter: FC<PropsType> = ({\n    data,\n    employeesActivity,\n    setOneEmployeeActivity,\n}) => {\n    return (\n        <div className={styles.listContainer}>\n            <h3 className={styles.letter}>{data.letter}</h3>\n            {data.arr.length !== 0 ? (\n                <div>\n                    {data.arr.map((employee) => {\n                        const id = employee.id\n                        const active = employeesActivity[id] || false\n\n                        return (\n                            <Employee\n                                key={id}\n                                data={employee}\n                                active={active}\n                                onActivityChange={(state) =>\n                                    setOneEmployeeActivity(id, state)\n                                }\n                            />\n                        )\n                    })}\n                </div>\n            ) : (\n                <div>No employees</div>\n            )}\n        </div>\n    )\n}\n\nexport default EmployeesByLetter\n","import styles from \"./Preloader.module.css\"\nimport { FC } from \"react\"\n\nconst Preloader: FC = () => {\n    return (\n        <div className={styles.wrapper}>\n            <span className={styles.dot} />\n            <div className={styles.dots} />\n        </div>\n    )\n}\n\nexport default Preloader\n","import { FC, useEffect } from \"react\"\nimport { getEmployeesByAlphabet } from \"../../common/helpers/employees-helper\"\nimport EmployeesByLetter from \"../EmployeesByLetter/EmployeesByLetter\"\nimport { EMPLOYEES_ACTIVITY_LOCAL_STORAGE_KEY } from \"../../common/constants\"\nimport Preloader from \"../../common/preloader/Preloader\"\nimport { EmployeesBlockContainerProps } from \"./EmployeesBlockContainer\"\n\ntype PropsType = EmployeesBlockContainerProps\n\nconst EmployeesBlock: FC<PropsType> = ({\n    employees,\n    employeesActivity,\n\n    getDataEmployees,\n    setOneEmployeeActivity,\n}) => {\n    useEffect(() => {\n        getDataEmployees()\n    }, [getDataEmployees])\n\n    useEffect(() => {\n        if (Object.keys(employeesActivity).length) {\n            localStorage.setItem(\n                EMPLOYEES_ACTIVITY_LOCAL_STORAGE_KEY,\n                JSON.stringify(employeesActivity)\n            )\n        }\n    }, [employeesActivity])\n\n    return (\n        <>\n            {employees === undefined && <Preloader />}\n            {employees === null && <div>There is an error</div>}\n            {employees &&\n                getEmployeesByAlphabet(employees).map((item) => {\n                    return (\n                        <EmployeesByLetter\n                            key={item.letter}\n                            data={item}\n                            employeesActivity={employeesActivity}\n                            setOneEmployeeActivity={setOneEmployeeActivity}\n                        />\n                    )\n                })}\n        </>\n    )\n}\n\nexport default EmployeesBlock\n","import { compose } from \"redux\"\nimport { connect, ConnectedProps } from \"react-redux\"\nimport {\n    getDataEmployees,\n    setOneEmployeeActivity,\n} from \"../../redux/employees-reducer\"\nimport EmployeesBlock from \"./EmployeesBlock\"\nimport { AppStateType } from \"../../redux/redux-store\"\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        employees: state.dataState.employees,\n        employeesActivity: state.dataState.employeesActivity,\n    }\n}\n\nconst connector = connect(mapStateToProps, {\n    getDataEmployees,\n    setOneEmployeeActivity,\n})\n\nexport type EmployeesBlockContainerProps = ConnectedProps<typeof connector>\n\nexport default compose(connector)(EmployeesBlock)\n","import { EmployeeType } from \"../../redux/employees-reducer\"\nimport { FC } from \"react\"\n\ntype PropsType = {\n    sortData: EmployeeType[]\n}\n\nconst SelectedEmployeesBlock: FC<PropsType> = ({ sortData }) => {\n    return (\n        <>\n            {sortData.map((item) => (\n                <div key={item.id}>\n                    <span>\n                        {item.lastName} {item.firstName}\n                    </span>\n                    &nbsp;\n                    <span>\n                        {new Date(item.dob)\n                            .toDateString()\n                            .slice(4, item.dob.length)}\n                    </span>\n                </div>\n            ))}\n        </>\n    )\n}\n\nexport default SelectedEmployeesBlock\n","import SelectedEmployeesBlock from \"./SelectedEmployeesBlock\"\nimport styles from \"./SelectedEmploees.module.css\"\nimport { getEmployeesByMonth } from \"../../common/helpers/employees-helper\"\nimport { FC } from \"react\"\nimport { SelectedEmployeesContainerProps } from \"./SelectedEmployeesContainer\"\n\ntype PropsType = SelectedEmployeesContainerProps\n\nconst SelectedEmployees: FC<PropsType> = ({\n    employees,\n    employeesActivity,\n    setAllEmployeesUnActive,\n}) => {\n    return (\n        <div className={styles.container}>\n            <h3>Employees birthday</h3>\n            {(employees &&\n                employees.filter((a) => employeesActivity[a.id]).length !== 0 &&\n                getEmployeesByMonth(\n                    employees.filter((a) => employeesActivity[a.id])\n                ).map((item) => {\n                    if (item.arr.length !== 0) {\n                        return (\n                            <div key={item.month}>\n                                <h5>{item.month}</h5>\n                                <SelectedEmployeesBlock sortData={item.arr} />\n                            </div>\n                        )\n                    }\n                    return undefined\n                })) || <div>Employees List is empty</div>}\n            <button\n                disabled={\n                    employees\n                        ? employees.filter((a) => employeesActivity[a.id])\n                              .length === 0\n                        : false\n                }\n                onClick={setAllEmployeesUnActive}\n            >\n                Remove all\n            </button>\n        </div>\n    )\n}\n\nexport default SelectedEmployees\n","import { compose } from \"redux\"\nimport { connect, ConnectedProps } from \"react-redux\"\nimport SelectedEmployees from \"./SelectedEmployees\"\nimport { setAllEmployeesUnActive } from \"../../redux/employees-reducer\"\nimport { AppStateType } from \"../../redux/redux-store\"\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        employees: state.dataState.employees,\n        employeesActivity: state.dataState.employeesActivity,\n    }\n}\n\nconst connector = connect(mapStateToProps, {\n    setAllEmployeesUnActive,\n})\n\nexport type SelectedEmployeesContainerProps = ConnectedProps<typeof connector>\n\nexport default compose(connector)(SelectedEmployees)\n","import styles from \"./App.module.css\"\nimport EmployeesBlockContainer from \"./components/EmployeesBlock/EmployeesBlockContainer\"\nimport SelectedEmployeesContainer from \"./components/SelectedEmployees/SelectedEmployeesContainer\"\nimport { FC } from \"react\"\n\nconst App: FC = () => {\n    return (\n        <div>\n            <h1>EMPLOYEES</h1>\n            <div className={styles.App}>\n                <div className={styles.tableContainer}>\n                    <EmployeesBlockContainer />\n                </div>\n                <SelectedEmployeesContainer />\n            </div>\n        </div>\n    )\n}\n\nexport default App\n","import { applyMiddleware, combineReducers, createStore, compose } from \"redux\"\nimport thunkMiddleware from \"redux-thunk\"\nimport dataState from \"./employees-reducer\"\n\nconst reducers = combineReducers({\n    dataState,\n})\n\ntype RootReducerType = typeof reducers\nexport type AppStateType = ReturnType<RootReducerType>\n\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\nconst store = createStore(\n    reducers,\n    composeEnhancers(applyMiddleware(thunkMiddleware))\n)\n\nexport default store\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport { Provider } from \"react-redux\"\nimport store from \"./redux/redux-store\"\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n)\n"],"sourceRoot":""}